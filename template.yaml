AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  epitech-crm
Resources:

  ## =====================================
  ##          Lambda Functions
  ## =====================================

# TODO: make different handlers for each function

  GetArticle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main 
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /article/{id}
              Method: GET
              RestApiId: !Ref DefaultApi
              Auth:
                Authorizer: MyCognitoAuth

  GetArticleTag:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /article/tag
              Method: GET
              RestApiId: !Ref DefaultApi
              Auth:
                Authorizer: MyCognitoAuth

  GetArticles:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /article
              Method: GET
              RestApiId: !Ref DefaultApi
              Auth:
                Authorizer: MyCognitoAuth

  PutArticle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /article
            Method: POST
            RestApiId: !Ref DefaultApi
            Auth:
              Authorizer: MyCognitoAuth

  DeleteArticle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /article/{id}
              Method: DELETE
              RestApiId: !Ref DefaultApi
              Auth:
                Authorizer: MyCognitoAuth

  UpdateArticle:
    Type: AWS::Serverless::Function
    Properties:
      Handler: main
      Runtime: go1.x
      Policies:
        - AWSLambdaExecute
        - DynamoDBCrudPolicy:
            TableName: !Ref ArticleTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
              Path: /article/{id}
              Method: PUT
              RestApiId: !Ref DefaultApi
              Auth:
                Authorizer: MyCognitoAuth

  ## =====================================
  ##          API Gateway
  ## =====================================

  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
         AllowMethods: "'*'"
         AllowHeaders: "'*'"
         AllowOrigin: "'*'"
      # DefinitionBody:
      #   'Fn::Transform':
      #     Name: 'AWS::Include'
      #     Parameters:
      #       # Chemin vers la spec OpenAPI
      #       Location: !Sub "s3://${CicdBucket}/spec/api-spec.yaml"
      Auth:
        # AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          MyCognitoAuth:
            # UserPoolArn: arn:aws:cognito-idp:eu-west-3:415386142602:userpool/eu-west-3_GZqditPh6
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity: # OPTIONAL
              Header: Authorization # OPTIONAL; Default: 'Authorization'

  ## =====================================  
  ##          DynamoDB
  ## =====================================

  ArticleTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Articles
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: tag
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: tag-index
          KeySchema:
            - AttributeName: tag
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput: 
            ReadCapacityUnits: 3
            WriteCapacityUnits: 3

  ## =====================================
  ##          S3
  ## =====================================

  FrontBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: epitech-crm-front
      # WebsiteConfiguration:
      #   IndexDocument: index.html
      #   ErrorDocument: error.html

  FrontBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontBucket
      PolicyDocument:
        Version: 2008-10-17
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontBucket}/*'

  ## =====================================
  ##          CloudFront
  ## =====================================

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Epitech-crmApp'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        Comment: "Epitech-CRM sam cloudfront"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-epitech-crm-front
            DomainName: !GetAtt FrontBucket.DomainName
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity: 
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - HEAD
            - DELETE
            - POST
            - GET
            - OPTIONS
            - PUT
            - PATCH
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-epitech-crm-front
          ViewerProtocolPolicy : redirect-to-https

  ## =====================================
  ##          Cognito
  ## =====================================

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      # skip verification email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
          TemporaryPasswordValidityDays: 100
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailMessage: "Your verification code is {####}"
        EmailSubject: "Your verification code"
        SmsMessage: "Your verification code is {####}"

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${CognitoUserPool}-client
      GenerateSecret: false
      UserPoolId: !Ref CognitoUserPool
      CallbackURLs:
        - http://localhost:5173/callback/
        - !Sub https://${CloudfrontDistribution.DomainName}/callback/
      LogoutURLs:
        - http://localhost:5173/
        - !Sub https://${CloudfrontDistribution.DomainName}/
      AllowedOAuthFlowsUserPoolClient: true
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      
  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: epitech-openid
      UserPoolId: !Ref CognitoUserPool
  
  CognitoAdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: Admin group
      GroupName: Admin
      RoleArn: arn:aws:iam::415386142602:role/Admin-epitech
      UserPoolId: !Ref CognitoUserPool
